{"ast":null,"code":"var _jsxFileName = \"/Users/jungwha/AndroidStudioProjects/showMoim_front/src/Context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { executeSignUpMemberService, executeEmailVerifyRequestService, executeEmailVerifyService } from \"../Api/MemberApiService\";\nimport { SignUpInfo } from \"../Model/SignUpInfo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [username, setUsername] = useState(null);\n  async function signUp(email, code, nickname, password, passwordConfirm) {\n    const memberInfo = new SignUpInfo(email, code, nickname, password, passwordConfirm);\n    const response = await executeSignUpMemberService(memberInfo);\n    if (response.status === 200) {\n      console.log(\"회원가입 성공!\");\n      setUsername(nickname);\n      return true;\n    }\n    console.log(\"회원가입 실패\");\n    return false;\n  }\n  async function emailVerifyRequest(email) {\n    const emailInfo = {\n      email\n    };\n    const response = await executeEmailVerifyRequestService(emailInfo);\n    if (response.status === 200) {\n      console.log(\"이메일 인증 요청 성공\");\n      return true;\n    }\n    console.log(\"이메일 인증 요청 실패\");\n    return false;\n  }\n  async function emailVerifyRequest(email) {\n    const response = await executeEmailVerifyRequestService({\n      email\n    });\n    if (response.status === 200) {\n      console.log(\"이메일 인증 요청 성공\");\n      return true;\n    }\n    console.log(\"이메일 인증 요청 실패\");\n    return false;\n  }\n  async function emailVerify(email, code) {\n    const response = await executeEmailVerifyService({\n      email,\n      code\n    });\n    if (response.status === 200) {\n      console.log(\"이메일 인증 성공\");\n      return true;\n    }\n    return false;\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      signUp,\n      emailVerifyRequest,\n      emailVerify,\n      username\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n}\n_s2(AuthProvider, \"EG4uoE4pu1hmnB7hy4IlNEcuCmM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","executeSignUpMemberService","executeEmailVerifyRequestService","executeEmailVerifyService","SignUpInfo","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","_ref","_s2","children","username","setUsername","signUp","email","code","nickname","password","passwordConfirm","memberInfo","response","status","console","log","emailVerifyRequest","emailInfo","emailVerify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jungwha/AndroidStudioProjects/showMoim_front/src/Context/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { executeSignUpMemberService , executeEmailVerifyRequestService, executeEmailVerifyService} from \"../Api/MemberApiService\";\nimport { SignUpInfo }from \"../Model/SignUpInfo\";\nexport const AuthContext = createContext()\n \nexport const useAuth = () => useContext(AuthContext)\n\nexport default function AuthProvider({children}){\n    \n    const [username, setUsername] = useState(null)\n\n    async function signUp(email, code, nickname, password, passwordConfirm){\n\n        const memberInfo = new SignUpInfo(email, code, nickname, password, passwordConfirm);\n \n        const response = await executeSignUpMemberService(memberInfo)\n\n        if(response.status === 200){\n            console.log(\"회원가입 성공!\")\n            setUsername(nickname)\n            return true\n        }\n\n        console.log(\"회원가입 실패\")\n\n        return false\n    }\n\n    async function emailVerifyRequest(email : String){\n        const emailInfo : { email:String } = {\n            email\n        }\n\n        const response = await executeEmailVerifyRequestService(emailInfo)\n\n        if(response.status === 200){\n            console.log(\"이메일 인증 요청 성공\")\n            return true\n        }\n        \n        console.log(\"이메일 인증 요청 실패\")\n\n        return false\n    }\n\n    async function emailVerifyRequest(email){\n        \n        const response = await executeEmailVerifyRequestService({email})\n\n        if(response.status===200){\n            console.log(\"이메일 인증 요청 성공\")\n            return true\n        }\n        console.log(\"이메일 인증 요청 실패\")\n        \n        return false\n    }\n\n    async function emailVerify(email, code){\n\n        const response = await executeEmailVerifyService({email, code})\n\n        if(response.status === 200){\n            console.log(\"이메일 인증 성공\")\n            return true\n        }\n\n        return false\n    }\n    \n\n        \n\n    return <AuthContext.Provider value = {{signUp, emailVerifyRequest, emailVerify, username}}>\n        {children}\n    </AuthContext.Provider>\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,0BAA0B,EAAGC,gCAAgC,EAAEC,yBAAyB,QAAO,yBAAyB;AACjI,SAASC,UAAU,QAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChD,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMU,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMV,UAAU,CAACQ,WAAW,CAAC;AAAA;AAAAE,EAAA,CAAvCD,OAAO;AAEpB,eAAe,SAASE,YAAYA,CAAAC,IAAA,EAAY;EAAAC,GAAA;EAAA,IAAX;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAE3C,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE9C,eAAegB,MAAMA,CAACC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,eAAe,EAAC;IAEnE,MAAMC,UAAU,GAAG,IAAIlB,UAAU,CAACa,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,eAAe,CAAC;IAEnF,MAAME,QAAQ,GAAG,MAAMtB,0BAA0B,CAACqB,UAAU,CAAC;IAE7D,IAAGC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBX,WAAW,CAACI,QAAQ,CAAC;MACrB,OAAO,IAAI;IACf;IAEAM,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,OAAO,KAAK;EAChB;EAEA,eAAeC,kBAAkBA,CAACV,KAAc,EAAC;IAC7C,MAAMW,SAA4B,GAAG;MACjCX;IACJ,CAAC;IAED,MAAMM,QAAQ,GAAG,MAAMrB,gCAAgC,CAAC0B,SAAS,CAAC;IAElE,IAAGL,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,OAAO,IAAI;IACf;IAEAD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAE3B,OAAO,KAAK;EAChB;EAEA,eAAeC,kBAAkBA,CAACV,KAAK,EAAC;IAEpC,MAAMM,QAAQ,GAAG,MAAMrB,gCAAgC,CAAC;MAACe;IAAK,CAAC,CAAC;IAEhE,IAAGM,QAAQ,CAACC,MAAM,KAAG,GAAG,EAAC;MACrBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,OAAO,IAAI;IACf;IACAD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAE3B,OAAO,KAAK;EAChB;EAEA,eAAeG,WAAWA,CAACZ,KAAK,EAAEC,IAAI,EAAC;IAEnC,MAAMK,QAAQ,GAAG,MAAMpB,yBAAyB,CAAC;MAACc,KAAK;MAAEC;IAAI,CAAC,CAAC;IAE/D,IAAGK,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxB,OAAO,IAAI;IACf;IAEA,OAAO,KAAK;EAChB;EAKA,oBAAOpB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAI;MAACf,MAAM;MAAEW,kBAAkB;MAAEE,WAAW;MAAEf;IAAQ,CAAE;IAAAD,QAAA,EACrFA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAC3B;AAACvB,GAAA,CArEuBF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}